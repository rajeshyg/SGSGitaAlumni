import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Label } from '../components/ui/label';
import { Checkbox } from '../components/ui/checkbox';
import { AlertCircle, CheckCircle2, Loader2 } from 'lucide-react';
import { Alert, AlertDescription } from '../components/ui/alert';

/**
 * PreferencesPage - User domain preferences configuration
 * 
 * Based on Task 7.7: Domain Taxonomy & Preferences System
 * Allows users to configure:
 * - Primary Domain (single selection)
 * - Secondary Domains (up to 3)
 * - Areas of Interest (granular selections within domains)
 */

// Domain hierarchy structure (from Task 7.7)
const DOMAIN_HIERARCHY = {
  technology: {
    name: 'Technology',
    areasOfInterest: [
      'Software Development',
      'AI/ML',
      'Data Science',
      'Cloud Computing',
      'Cybersecurity',
      'DevOps',
      'Mobile Development',
      'Web Development'
    ]
  },
  healthcare: {
    name: 'Healthcare',
    areasOfInterest: [
      'Clinical Medicine',
      'Public Health',
      'Medical Research',
      'Healthcare Administration',
      'Nursing',
      'Pharmacy',
      'Mental Health',
      'Telemedicine'
    ]
  },
  business: {
    name: 'Business',
    areasOfInterest: [
      'Strategy',
      'Marketing',
      'Product Management',
      'Sales',
      'Operations',
      'Finance',
      'Human Resources',
      'Entrepreneurship'
    ]
  },
  education: {
    name: 'Education',
    areasOfInterest: [
      'K-12 Education',
      'Higher Education',
      'Educational Technology',
      'Curriculum Development',
      'Special Education',
      'Adult Learning',
      'Educational Leadership',
      'Research & Assessment'
    ]
  },
  engineering: {
    name: 'Engineering',
    areasOfInterest: [
      'Mechanical Engineering',
      'Electrical Engineering',
      'Civil Engineering',
      'Chemical Engineering',
      'Aerospace Engineering',
      'Industrial Engineering',
      'Environmental Engineering',
      'Biomedical Engineering'
    ]
  },
  arts: {
    name: 'Arts & Design',
    areasOfInterest: [
      'Graphic Design',
      'UX/UI Design',
      'Fine Arts',
      'Photography',
      'Film & Video',
      'Music',
      'Architecture',
      'Fashion Design'
    ]
  }
};

interface UserPreferences {
  primaryDomain: string;
  secondaryDomains: string[];
  areasOfInterest: string[];
}

const PreferencesPage: React.FC = () => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  
  const [preferences, setPreferences] = useState<UserPreferences>({
    primaryDomain: '',
    secondaryDomains: [],
    areasOfInterest: []
  });

  // Load user preferences on mount
  useEffect(() => {
    loadPreferences();
  }, [user?.id]);

  const loadPreferences = async () => {
    if (!user?.id) return;
    
    setLoading(true);
    setError(null);
    
    try {
      // TODO: Replace with actual API call when backend is ready
      // const response = await APIService.getUserPreferences(user.id);
      // setPreferences(response);
      
      // For now, load from user context or use defaults
      console.log('Loading preferences for user:', user.id);
    } catch (err) {
      console.error('Failed to load preferences:', err);
      setError('Failed to load your preferences. Using defaults.');
    } finally {
      setLoading(false);
    }
  };

  const handlePrimaryDomainChange = (domain: string) => {
    setPreferences(prev => ({
      ...prev,
      primaryDomain: domain,
      // Clear areas of interest if primary domain changes
      areasOfInterest: prev.primaryDomain === domain ? prev.areasOfInterest : []
    }));
    setSuccess(false);
  };

  const handleSecondaryDomainToggle = (domain: string) => {
    setPreferences(prev => {
      const isSelected = prev.secondaryDomains.includes(domain);
      
      if (isSelected) {
        // Remove domain
        return {
          ...prev,
          secondaryDomains: prev.secondaryDomains.filter(d => d !== domain)
        };
      } else {
        // Add domain (max 3)
        if (prev.secondaryDomains.length >= 3) {
          setError('Maximum 3 secondary domains allowed');
          return prev;
        }
        return {
          ...prev,
          secondaryDomains: [...prev.secondaryDomains, domain]
        };
      }
    });
    setSuccess(false);
    setError(null);
  };

  const handleAreaOfInterestToggle = (area: string) => {
    setPreferences(prev => {
      const isSelected = prev.areasOfInterest.includes(area);
      
      if (isSelected) {
        return {
          ...prev,
          areasOfInterest: prev.areasOfInterest.filter(a => a !== area)
        };
      } else {
        return {
          ...prev,
          areasOfInterest: [...prev.areasOfInterest, area]
        };
      }
    });
    setSuccess(false);
  };

  const handleSave = async () => {
    // Validation
    if (!preferences.primaryDomain) {
      setError('Please select a primary domain');
      return;
    }

    setSaving(true);
    setError(null);
    setSuccess(false);

    try {
      // TODO: Replace with actual API call when backend is ready
      // await APIService.updateUserPreferences(user!.id, preferences);
      
      console.log('Saving preferences:', preferences);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 500));
      
      setSuccess(true);
      setTimeout(() => setSuccess(false), 3000);
    } catch (err) {
      console.error('Failed to save preferences:', err);
      setError('Failed to save preferences. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4 text-primary" />
          <p className="text-muted-foreground">Loading your preferences...</p>
        </div>
      </div>
    );
  }

  const selectedDomainKey = preferences.primaryDomain.toLowerCase().replace(/\s+/g, '-').replace('&', '');
  const availableAreasOfInterest = selectedDomainKey && DOMAIN_HIERARCHY[selectedDomainKey as keyof typeof DOMAIN_HIERARCHY]
    ? DOMAIN_HIERARCHY[selectedDomainKey as keyof typeof DOMAIN_HIERARCHY].areasOfInterest
    : [];

  return (
    <div className="min-h-screen bg-background p-4 md:p-8">
      <div className="max-w-4xl mx-auto space-y-6">
        <div>
          <h1 className="text-3xl font-bold mb-2">Preferences</h1>
          <p className="text-muted-foreground">
            Configure your domain preferences to personalize your experience and receive relevant content.
          </p>
        </div>

        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {success && (
          <Alert className="bg-green-500/10 border-green-500/20 text-green-600 dark:text-green-400">
            <CheckCircle2 className="h-4 w-4" />
            <AlertDescription>Preferences saved successfully!</AlertDescription>
          </Alert>
        )}

        {/* Primary Domain Selection */}
        <Card>
          <CardHeader>
            <CardTitle>Primary Domain</CardTitle>
            <CardDescription>
              Select your main area of expertise or interest. This will personalize your dashboard and recommendations.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {Object.entries(DOMAIN_HIERARCHY).map(([key, domain]) => (
                <div key={key} className="flex items-center space-x-2">
                  <input
                    type="radio"
                    id={`primary-${key}`}
                    name="primaryDomain"
                    value={domain.name}
                    checked={preferences.primaryDomain === domain.name}
                    onChange={() => handlePrimaryDomainChange(domain.name)}
                    className="h-4 w-4 border-gray-300 text-primary focus:ring-2 focus:ring-primary"
                    aria-label={`Select ${domain.name} as primary domain`}
                  />
                  <Label htmlFor={`primary-${key}`} className="cursor-pointer">
                    {domain.name}
                  </Label>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Secondary Domains Selection */}
        <Card>
          <CardHeader>
            <CardTitle>Secondary Domains</CardTitle>
            <CardDescription>
              Select up to 3 additional domains you're interested in (optional).
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {Object.entries(DOMAIN_HIERARCHY)
                .filter(([, domain]) => domain.name !== preferences.primaryDomain)
                .map(([key, domain]) => (
                  <div key={key} className="flex items-center space-x-2">
                    <Checkbox
                      id={`secondary-${key}`}
                      checked={preferences.secondaryDomains.includes(domain.name)}
                      onCheckedChange={() => handleSecondaryDomainToggle(domain.name)}
                      disabled={
                        !preferences.secondaryDomains.includes(domain.name) &&
                        preferences.secondaryDomains.length >= 3
                      }
                    />
                    <Label
                      htmlFor={`secondary-${key}`}
                      className="cursor-pointer"
                    >
                      {domain.name}
                    </Label>
                  </div>
                ))}
            </div>
            <p className="text-sm text-muted-foreground mt-4">
              {preferences.secondaryDomains.length}/3 domains selected
            </p>
          </CardContent>
        </Card>

        {/* Areas of Interest */}
        {preferences.primaryDomain && availableAreasOfInterest.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle>Areas of Interest</CardTitle>
              <CardDescription>
                Select specific areas within {preferences.primaryDomain} that you're interested in.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {availableAreasOfInterest.map((area) => (
                  <div key={area} className="flex items-center space-x-2">
                    <Checkbox
                      id={`area-${area}`}
                      checked={preferences.areasOfInterest.includes(area)}
                      onCheckedChange={() => handleAreaOfInterestToggle(area)}
                    />
                    <Label htmlFor={`area-${area}`} className="cursor-pointer">
                      {area}
                    </Label>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Save Button */}
        <div className="flex justify-end space-x-4">
          <Button variant="outline" onClick={loadPreferences} disabled={saving}>
            Reset
          </Button>
          <Button onClick={handleSave} disabled={saving || !preferences.primaryDomain}>
            {saving ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Saving...
              </>
            ) : (
              'Save Preferences'
            )}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default PreferencesPage;
